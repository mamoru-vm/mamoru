Template.exploit.onCreated(function(){
	var self = this;
    var slug = FlowRouter.getParam('projectSlug');
  	self.interactingWith = new ReactiveVar(false);
  	self.sessionType = new ReactiveVar(null);


   self.subscribe('project-hosts', slug);
   self.subscribe('scanner-modules');
   self.subscribe('project-sessions', slug);
   initShell(self);
});

Template.exploit.onRendered(function(){
 consolePanel = $('#msfShell-panel');
 activateButton = $('#activateShellbutton');
 consolePanel.slideUp({duration:0});
 initShell(this);
});

Template.exploit.helpers({
	sessionCollection: function(){
		return Mamoru.Collections.Sessions.find().fetch();
	},
	sessionTableSettings: function(){
    let fields = [{key:'sessionId',label:'ID'},
    			  {key:'type',label:'Type'},
    			  {key:'via_exploit',label:'Via Exploit'},
    			  {key:'via_payload',label:'Via Payload'},
    			  {key:'runBy', label:'Popped By'},
    			  {key:'target_host', label:'Target'},
    			  {key:'established', label:'Established',
    			  cellClass:'center aligned',
    			  tmpl: Template.establishedCell
    			  },
    			   {
                    key:'_id', 
                    label:'Actions',
                    headerClass:'center aligned',
                    cellClass:'center aligned',
                    tmpl: Template.exploitActionCell
                  }

    			   ]
    return {fields:fields, rowsPerPage:8}
  }
});

Template.exploit.events({
	'click .interactSession': function(event, temp){
		var session = Mamoru.Collections.Sessions.findOne($(event.currentTarget).parent().data('value'));
	  	msfShell.activate()

	  	var reactiveSession = temp.get("interactingWith");
	  	reactiveSession.set(session.sessionId);
	    var reactiveType = temp.get("sessionType");
	  	reactiveType.set(session.type);

	    msfShell.setPrompt(`${session.type} ${session.sessionId}>`)
      
        consolePanel.slideDown();
        console.log("show shell")


	},
	'click .stopInteract': function(event, temp){
	  msfShell.deactivate();
	  var inter = temp.get("interactingWith");
	  inter.set(false);
      consolePanel.slideUp();
      console.log("hide Shell")
	},
    'click #toggleShell': function () {
    if(msfShell.isActive()){
      msfShell.deactivate();
      consolePanel.slideUp();
      console.log("hide Shell")
    } else { 
      msfShell.activate()
      consolePanel.slideDown();
      console.log("show shell")
    }
  }
});

Template.exploitActionCell.helpers({
	currentSession: function(id){
		var sessionId = Template.instance().get("interactingWith").get();
		var thisS = Mamoru.Collections.Sessions.findOne({sessionId: sessionId});
		return (id == thisS._id)
	},
  sessionId: function () {
    return this._id
  },
  interacting: function(){
  	var val = Template.instance().get("interactingWith").get();
  	console.log(val);
  	return val;
  }
});

Template.exploitActionCell.onRendered(function(){
	 $('.exploitTableActions').dropdown();
});