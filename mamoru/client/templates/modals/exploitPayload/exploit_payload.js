Template.exploitPayloadModal.onCreated(function(){
	var self = this;

  //self.selectedPayload = new ReactiveVar("")

    self.autorun(function() {
      self.subscribe('payload-options', self.get("selectedPayload").get(),{
          onReady:function(){
            console.log("PAYLOAD OPTIONS READY!");
            Tracker.afterFlush(function () {
             $(".help.circle.icon.pop").popup({inline: true, movePopup:false, jitter:60});
             $(".label.pop").popup({inline: true,movePopup:false, jitter:60});
             $('.ui.toggle.checkbox').checkbox();
             $('.dropdownOpt').dropdown();
              $('#exploitPayloadForm')
              .form({
                fields:createSemanticFieldsObj('PayloadOptions'),
                on:'submit',
                inline: true,
                onSuccess: function(event,fields){
                  console.log(fields)
                  var payloadOpts = []
                  for(var k in fields){
                    payloadOpts.push({name: k, val: fields[k]})
                  }
                  self.get("payloadOpts").set(payloadOpts)
                  }
                }
               );
            })
          }
        })
    })


});

Template.exploitPayloadModal.onRendered(function(){
  var self = this;

  $('#exploitPayloadModal').modal({
     onShow:function(){
       $('#payloadDropdown')
              .dropdown({
                showOnFocus: false,
                debug: true,
                onChange: function(val, text){
                  console.log("payload changed!");
                  console.log(val);
                  self.get("selectedPayload").set(val);
                }   
              })

      },
    onHide: function(){
     
    },
    onApprove : function() {
      $('#exploitPayloadForm').form('submit');
      console.log(self.get("selectedPayload").get());
      Meteor.setTimeout(()=>{
         console.log(self.get("payloadOpts").get());
      },2000)
           //console.log(self.instance.get("selectedPayload").get())
    }
  });

});

Template.exploitPayloadModal.helpers({
payloadOpts: function(){
  return Mamoru.Collections.PayloadOptions.find().fetch()
},
payloads: function(){
  var modId = FlowRouter.getParam('moduleId')
	return Mamoru.Collections.Modules.find({_id:{$ne:modId}}).fetch()
  },
  enumOpts: function(){
    var optionArr = Mamoru.Collections.PayloadOptions.find({type:"enum"},{sort: {required: -1}}).fetch();
    //return Mamoru.Collections.PayloadOptions.find({type:"enum"},{sort: {required: -1}}).fetch();
    //if(Template.instance().get('requiredOnly').get()){
      // optionArr = Mamoru.Collections.ModuleOptions.find({required:true, type:"enum"}, {sort: {required: -1}}).fetch();
  //  } else {
   // }
   return chunkArray(optionArr, 4)
  },
  textOpts: function(){
   var optionArr = Mamoru.Collections.PayloadOptions.find({type:{$in: ["address", "string", "addressrange"]},name:{$nin:["WORKSPACE"]}},{sort: {type: -1}}).fetch();
   //return Mamoru.Collections.PayloadOptions.find({type:{$in: ["address", "string", "addressrange"]},name:{$nin:["WORKSPACE"]}},{sort: {type: -1}}).fetch();
//  if(Template.instance().get('requiredOnly').get()){
   //   optionArr = Mamoru.Collections.ModuleOptions.find({$and:[{required:true},{type:{$in: ["address", "string"]}}]}, {sort: {type: -1}}).fetch();
  //  } else {
  //  }
    return chunkArray(optionArr, 4)
  },
  intOpts: function(){
   var optionArr = Mamoru.Collections.PayloadOptions.find({type:{$in: ["integer", "port"]}},{sort: {type: -1}}).fetch();
   //return Mamoru.Collections.PayloadOptions.find({type:"integer"},{sort: {type: -1}}).fetch();
 // if(Template.instance().get('requiredOnly').get()){
 //     optionArr = Mamoru.Collections.ModuleOptions.find({$and:[{required:true},{type:"integer"}]},{sort: {type: -1}}).fetch();
 //   } else {
 //   }

    return chunkArray(optionArr, 3)
  },
  boolOpts: function(){
   var optionArr = Mamoru.Collections.PayloadOptions.find({type:"bool"}, {sort: {required: -1}}).fetch();
    //return Mamoru.Collections.PayloadOptions.find({type:"bool"}, {sort: {required: -1}}).fetch();
    //  if(Template.instance().get('requiredOnly').get()){
   //   optionArr = Mamoru.Collections.ModuleOptions.find({required:true, type:"bool"}, {sort: {required: -1}}).fetch();
  //  } else {
  //  }
  return chunkArray(optionArr, 4)
  },
  typeInt: function(type){
    return (type == "integer") ? true : false;
  },
  originalName: function(namewithunderscore){
    return namewithunderscore.split("_").join("::")
  }
});

Template.exploitPayloadModal.events({

});
